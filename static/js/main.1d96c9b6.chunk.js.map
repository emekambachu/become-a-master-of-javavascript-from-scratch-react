{"version":3,"sources":["logo.svg","components/Button/index.js","components/Table/index.js","components/Search/index.js","constants/index.js","components/App/index.js","components/Javascript/index.js","components/Python/index.js","reportWebVitals.js","index.js"],"names":["Button","onclick","children","className","onClick","defaultProps","Loading","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","Table","props","state","sortKey","isSortReverse","onSort","bind","this","setState","removeItem","sortedList","activeSortKey","map","item","href","url","title","author","num_comments","points","type","objectId","Component","Search","input","focus","onChange","value","onSubmit","FormGroup","style","fontWeight","border","width","ref","node","DEFAULT_HPP","PATH_BASE","PATH_SEARCH","PARAM_SEARCH","PARAM_PAGE","PARAM_HPP","console","log","App","searchValue","event","searchTerm","target","results","searchKey","isLoading","searchvalue","fetchTopStories","setTopStories","result","hits","page","prevState","oldHits","updatedHits","updateTopStories","fetch","then","response","json","catch","e","checkTopStoriesSearchTerm","preventDefault","id","updatedList","filter","objectID","Container","fluid","Row","ButtonWithLoading","rest","withLoading","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d96c9b6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\n\r\nexport const Button = ({ onclick, children, className='' }) =>\r\n    <button\r\n        className={ className }\r\n        onClick={ onclick }>\r\n        { children }\r\n    </button>\r\n\r\nButton.propTypes = {\r\n    onClick: PropTypes.func,\r\n    className: PropTypes.string,\r\n    children: PropTypes.node.isRequired,\r\n}\r\n\r\nButton.defaultProps = {\r\n    className: '',\r\n}\r\n\r\nexport const Loading = () => <div><p>Loading...</p></div>\r\n\r\nexport const Sort = ({ sortKey, onSort, children, className, activeSortKey }) => {\r\n    const sortClass = ['btn default'];\r\n\r\n    if(sortKey === activeSortKey){\r\n        sortClass.push('btn btn-primary')\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            className={ sortClass.join(' ') }\r\n            onClick={() => onSort(sortKey)}>\r\n            { children }\r\n        </Button>\r\n    )\r\n}","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { sortBy } from 'lodash';\r\nimport { Button, Sort } from '../Button/index';\r\n\r\nconst SORTS = {\r\n    NONE: list => list,\r\n    TITLE: list => sortBy(list, 'title'),\r\n    AUTHOR: list => sortBy(list, 'author'),\r\n    COMMENTS: list => sortBy(list, 'num_comments').reverse(),\r\n    POINTS: list => sortBy(list, 'points').reverse(),\r\n}\r\n\r\nclass Table extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            sortKey: 'NONE',\r\n            isSortReverse: false\r\n        }\r\n        this.onSort = this.onSort.bind(this);\r\n    }\r\n\r\n    // Sorting Function\r\n    onSort(sortKey){\r\n        const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse;\r\n        this.setState({ sortKey, isSortReverse });\r\n    }\r\n\r\n    render() {\r\n        const {list, removeItem} = this.props;\r\n        const {sortKey, isSortReverse} = this.state;\r\n        const sortedList = SORTS[sortKey](list);\r\n        const reverseSortedList = isSortReverse ? sortedList.reverse() : sortedList;\r\n\r\n        return (\r\n            <div className=\"col-sm-10 col-sm-offset-1\">\r\n                <div className=\"text-center\">\r\n\r\n                    <hr/>\r\n\r\n                    <sort\r\n                        className=\"btn btn-xs btn-primary sortBtn\"\r\n                        sortKey={'NONE'}\r\n                        onSort={this.onSort}\r\n                        activeSortKey={sortKey}\r\n                    >Default\r\n                    </sort>\r\n\r\n                    <sort\r\n                        className=\"btn btn-xs btn-primary sortBtn\"\r\n                        sortKey={'TITLE'}\r\n                        onSort={this.onSort}\r\n                        activeSortKey={sortKey}\r\n                    >Title\r\n                    </sort>\r\n\r\n                    <sort\r\n                        className=\"btn btn-xs btn-primary sortBtn\"\r\n                        sortKey={'AUTHOR'}\r\n                        onSort={this.onSort}\r\n                        activeSortKey={sortKey}\r\n                    >Author\r\n                    </sort>\r\n\r\n                    <sort\r\n                        className=\"btn btn-xs btn-primary sortBtn\"\r\n                        sortKey={'COMMENTS'}\r\n                        onSort={this.onSort}\r\n                        activeSortKey={sortKey}\r\n                    >Comments\r\n                    </sort>\r\n\r\n                    <sort\r\n                        className=\"btn btn-xs btn-primary sortBtn\"\r\n                        sortKey={'POINTS'}\r\n                        onSort={this.onSort}\r\n                        activeSortKey={sortKey}\r\n                    >Points\r\n                    </sort>\r\n\r\n                    <hr/>\r\n                </div>\r\n\r\n                {\r\n                    SORTS[sortKey](list).map(item =>\r\n                        <div key={item.objectId}>\r\n                            <h1>\r\n                                <a href={item.url}>{item.title}</a> by {item.author}\r\n                            </h1>\r\n                            <h4>\r\n                                {item.num_comments} Comments | {item.points} Points\r\n                                <button className=\"btn btn-danger btn-xs\"\r\n                                        type=\"button\"\r\n                                        onClick={() => removeItem(item.objectId)}>\r\n                                    Remove</button>\r\n                            </h4>\r\n                            <hr/>\r\n\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTable.propTypes = {\r\n    list: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            objectID: PropTypes.string.isRequired,\r\n            author: PropTypes.string,\r\n            url: PropTypes.string,\r\n            num_comments: PropTypes.number,\r\n            points: PropTypes.number,\r\n        })\r\n    ).isRequired,\r\n    removeItem: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Table;","import React, {Component} from \"react\";\r\nimport {FormGroup} from \"react-bootstrap\";\r\nimport {Button} from \"../Button/index\";\r\n\r\nclass Search extends Component {\r\n\r\n    componentDidMount() {\r\n        this.input.focus();\r\n    }\r\n\r\n    render(){\r\n        const { onChange, value, children, onSubmit } = this.props;\r\n        return(\r\n            <form onSubmit={ onSubmit }>\r\n                <FormGroup>\r\n                    <h1 style={{ fontWeight: 'bold' }}>{ children }</h1>\r\n                    <hr style={{ border: '2px solid black', width: '100px' }} />\r\n                    <div className=\"input-group\">\r\n                        <input\r\n                            className=\"form-control width100 searchForm\"\r\n                            type=\"text\"\r\n                            onChange={ onChange }\r\n                            value={ value }\r\n                            ref={(node) => { this.input = node }}\r\n                        />\r\n\r\n                        <span className=\"input-group-btn\">\r\n                <Button\r\n                    className=\"btn btn-primary searchBtn\"\r\n                    type=\"submit\">Search\r\n                </Button>\r\n              </span>\r\n\r\n                    </div>\r\n                </FormGroup>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","export const DEFAULT_QUERY = '';\r\nexport const DEFAULT_PAGE = 0;\r\nexport const DEFAULT_HPP = 100;\r\n\r\nexport const PATH_BASE = 'https://hn.algolia.com/api/v1';\r\nexport const PATH_SEARCH = '/search';\r\nexport const PARAM_SEARCH = 'query=';\r\nexport const PARAM_PAGE = 'page=';\r\nexport const PARAM_HPP = 'hitsPerPage=';","import logo from '../../logo.svg';\r\nimport '../../App.css';\r\nimport list from '../../list';\r\nimport React, {Component} from \"react\";\r\nimport { Container, Row, FormGroup} from 'react-bootstrap';\r\nimport Table from '../Table/index';\r\nimport Search from '../Search/index';\r\nimport { Button, Loading } from '../Button/index';\r\nimport {\r\n    DEFAULT_QUERY, DEFAULT_PAGE, DEFAULT_HPP, PATH_BASE, PATH_SEARCH, PARAM_SEARCH, PARAM_PAGE, PARAM_HPP\r\n} from '../../constants/index';\r\n\r\n// const url = PATH_BASE + PATH_SEARCH + '?' + PARAM_SEARCH + DEFAULT_QUERY;\r\nconst url = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${DEFAULT_QUERY}&${PARAM_PAGE}&${PARAM_HPP}${DEFAULT_HPP}`;\r\nconsole.log(url);\r\n\r\nconst withLoading = (Component) => ({ isLoading, ...rest }) =>\r\n    isLoading ? <Loading /> : <Component {...rest} />\r\n\r\nconst updateTopStories = (hits, page) => prevState => {\r\n    const { searchKey, results } = prevState;\r\n    const oldHits = results && results[searchKey] ? results[searchKey].hits : [];\r\n    const updatedHits = [...oldHits, ...hits];\r\n\r\n    return { results: { ...results, [searchKey]: { hits: updatedHits, page }}, isLoading: false\r\n    }\r\n}\r\n\r\nclass App extends Component{\r\n\r\n    // Setting up internal component state\r\n    // ES6 class can use constructors to initialize internal state\r\n    constructor(props){\r\n        // super props sets this.props to the constructor\r\n        super(props);\r\n\r\n        // Setting up state\r\n        this.state = {\r\n            results: null,\r\n            searchKey: '',\r\n            searchTerm: DEFAULT_QUERY,\r\n            isLoading: false,\r\n        }\r\n\r\n        // bind the functions to this (app component)\r\n        this.removeItem = this.removeItem.bind(this);\r\n        this.searchvalue = this.searchValue.bind(this);\r\n        this.fetchTopStories = this.fetchTopStories.bind(this);\r\n        this.setTopStories = this.setTopStories.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    }\r\n\r\n    // Check top stories search term\r\n    checkTopStoriesSearchTerm(searchTerm){\r\n        return !this.state.results[searchTerm];\r\n    }\r\n\r\n    // Set top stories\r\n    setTopStories(result){\r\n        // get hits and page from result\r\n        const {hits, page} = result;\r\n\r\n        this.setState(updateTopStories(hits, page));\r\n    }\r\n\r\n    // Fetch the stories\r\n    fetchTopStories(searchTerm, page){\r\n        this.setState({ isLoading: true });\r\n        fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\r\n            .then(response => response.json())\r\n            .then(result => this.setTopStories(result))\r\n            .catch( e => e);\r\n    }\r\n\r\n    // component did mount\r\n    componentDidMount() {\r\n        const { searchTerm } = this.state;\r\n        this.setState({ searchKey: searchTerm });\r\n        this.fetchTopStories(searchTerm, DEFAULT_PAGE);\r\n    }\r\n\r\n    // on search submit function\r\n    onSubmit(event){\r\n        const { searchTerm } = this.state;\r\n        this.setState({ searchKey: searchTerm });\r\n\r\n        if(this.checkTopStoriesSearchTerm(searchTerm)){\r\n            this.fetchTopStories(this.state.searchTerm, DEFAULT_PAGE);\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    // let's rewrite removeItem function in ES6\r\n    removeItem(id){\r\n        const { results, searchKey } = this.state;\r\n        const {hits, page} = results[searchKey];\r\n        // const isNotId = item => item.objectId !== id;\r\n        const updatedList = hits.filter(item => item.objectID !== id);\r\n        // Object assign\r\n        // this.setState({ result: Object.assign({}, this.state.result, {hits: updatedList}) });\r\n\r\n        // Spread operator\r\n        this.setState({ results: {...results, [searchKey]: {hits: updatedList, page}} });\r\n    }\r\n\r\n    // Get input fields value from search form\r\n    searchValue = (event) => {\r\n        // console.log(event);\r\n        this.setState({ searchTerm: event.target.value })\r\n    }\r\n\r\n    render (){\r\n        const { results, searchTerm, searchKey, isLoading } = this.state;\r\n\r\n        // if(!result){ return null; }\r\n        const page = (results && results[searchKey] && results[searchKey].page) || 0;\r\n        const list = (results && results[searchKey] && results[searchKey].hits) || [];\r\n\r\n        console.log(this);\r\n\r\n        return (\r\n            <div>\r\n\r\n                <Container fluid>\r\n                    <Row>\r\n                        <div className=\"jumbotron text-center\">\r\n                            <Search\r\n                                onChange={ this.searchValue }\r\n                                value={ searchTerm }\r\n                                onSubmit={ this.onSubmit }\r\n                            >News App</Search>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n\r\n                <Container>\r\n                    <Row>\r\n                        <Table\r\n                            list={ list }\r\n                            removeItem={ this.removeItem }\r\n                        />\r\n\r\n                        <div className=\"text-center alert\">\r\n                            <ButtonWithLoading\r\n                                isLoading={isLoading}\r\n                                className=\"btn btn-success\"\r\n                                onClick={ () => this.fetchTopStories(searchTerm, page + 1) }>\r\n                                Load more\r\n                            </ButtonWithLoading>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nconst ButtonWithLoading = withLoading(Button);\r\n\r\nexport default App;\r\n","import logo from '../../logo.svg';\r\nimport '../../App.css';\r\nimport list from '../../list';\r\nimport React, {Component} from \"react\";\r\nimport { Container, Row, FormGroup} from 'react-bootstrap';\r\nimport Table from '../Table/index';\r\nimport Search from '../Search/index';\r\nimport { Button, Loading } from '../Button/index';\r\nimport {\r\n    DEFAULT_QUERY, DEFAULT_PAGE, DEFAULT_HPP, PATH_BASE, PATH_SEARCH, PARAM_SEARCH, PARAM_PAGE, PARAM_HPP\r\n} from '../../constants/index';\r\n\r\n// const url = PATH_BASE + PATH_SEARCH + '?' + PARAM_SEARCH + DEFAULT_QUERY;\r\nconst url = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${DEFAULT_QUERY}&${PARAM_PAGE}&${PARAM_HPP}${DEFAULT_HPP}`;\r\nconsole.log(url);\r\n\r\nconst withLoading = (Component) => ({ isLoading, ...rest }) =>\r\n    isLoading ? <Loading /> : <Component {...rest} />\r\n\r\nconst updateTopStories = (hits, page) => prevState => {\r\n    const { searchKey, results } = prevState;\r\n    const oldHits = results && results[searchKey] ? results[searchKey].hits : [];\r\n    const updatedHits = [...oldHits, ...hits];\r\n\r\n    return { results: { ...results, [searchKey]: { hits: updatedHits, page }}, isLoading: false\r\n    }\r\n}\r\n\r\nclass Javascript extends Component{\r\n\r\n    // Setting up internal component state\r\n    // ES6 class can use constructors to initialize internal state\r\n    constructor(props){\r\n        // super props sets this.props to the constructor\r\n        super(props);\r\n\r\n        // Setting up state\r\n        this.state = {\r\n            results: null,\r\n            searchKey: '',\r\n            searchTerm: 'javascript',\r\n            isLoading: false,\r\n        }\r\n\r\n        // bind the functions to this (app component)\r\n        this.removeItem = this.removeItem.bind(this);\r\n        this.searchvalue = this.searchValue.bind(this);\r\n        this.fetchTopStories = this.fetchTopStories.bind(this);\r\n        this.setTopStories = this.setTopStories.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    }\r\n\r\n    // Check top stories search term\r\n    checkTopStoriesSearchTerm(searchTerm){\r\n        return !this.state.results[searchTerm];\r\n    }\r\n\r\n    // Set top stories\r\n    setTopStories(result){\r\n        // get hits and page from result\r\n        const {hits, page} = result;\r\n\r\n        this.setState(updateTopStories(hits, page));\r\n    }\r\n\r\n    // Fetch the stories\r\n    fetchTopStories(searchTerm, page){\r\n        this.setState({ isLoading: true });\r\n        fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\r\n            .then(response => response.json())\r\n            .then(result => this.setTopStories(result))\r\n            .catch( e => e);\r\n    }\r\n\r\n    // component did mount\r\n    componentDidMount() {\r\n        const { searchTerm } = this.state;\r\n        this.setState({ searchKey: searchTerm });\r\n        this.fetchTopStories(searchTerm, DEFAULT_PAGE);\r\n    }\r\n\r\n    // on search submit function\r\n    onSubmit(event){\r\n        const { searchTerm } = this.state;\r\n        this.setState({ searchKey: searchTerm });\r\n\r\n        if(this.checkTopStoriesSearchTerm(searchTerm)){\r\n            this.fetchTopStories(this.state.searchTerm, DEFAULT_PAGE);\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    // let's rewrite removeItem function in ES6\r\n    removeItem(id){\r\n        const { results, searchKey } = this.state;\r\n        const {hits, page} = results[searchKey];\r\n        // const isNotId = item => item.objectId !== id;\r\n        const updatedList = hits.filter(item => item.objectID !== id);\r\n        // Object assign\r\n        // this.setState({ result: Object.assign({}, this.state.result, {hits: updatedList}) });\r\n\r\n        // Spread operator\r\n        this.setState({ results: {...results, [searchKey]: {hits: updatedList, page}} });\r\n    }\r\n\r\n    // Get input fields value from search form\r\n    searchValue = (event) => {\r\n        // console.log(event);\r\n        this.setState({ searchTerm: event.target.value })\r\n    }\r\n\r\n    render (){\r\n        const { results, searchTerm, searchKey, isLoading } = this.state;\r\n\r\n        // if(!result){ return null; }\r\n        const page = (results && results[searchKey] && results[searchKey].page) || 0;\r\n        const list = (results && results[searchKey] && results[searchKey].hits) || [];\r\n\r\n        console.log(this);\r\n\r\n        return (\r\n            <div>\r\n\r\n                <Container>\r\n                    <Row>\r\n                        <Table\r\n                            list={ list }\r\n                            removeItem={ this.removeItem }\r\n                        />\r\n\r\n                        <div className=\"text-center alert\">\r\n                            <ButtonWithLoading\r\n                                isLoading={isLoading}\r\n                                className=\"btn btn-success\"\r\n                                onClick={ () => this.fetchTopStories(searchTerm, page + 1) }>\r\n                                Load more\r\n                            </ButtonWithLoading>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nconst ButtonWithLoading = withLoading(Button);\r\n\r\nexport default Javascript;\r\n","import logo from '../../logo.svg';\r\nimport '../../App.css';\r\nimport list from '../../list';\r\nimport React, {Component} from \"react\";\r\nimport { Container, Row, FormGroup} from 'react-bootstrap';\r\nimport Table from '../Table/index';\r\nimport Search from '../Search/index';\r\nimport { Button, Loading } from '../Button/index';\r\nimport {\r\n    DEFAULT_QUERY, DEFAULT_PAGE, DEFAULT_HPP, PATH_BASE, PATH_SEARCH, PARAM_SEARCH, PARAM_PAGE, PARAM_HPP\r\n} from '../../constants/index';\r\n\r\n// const url = PATH_BASE + PATH_SEARCH + '?' + PARAM_SEARCH + DEFAULT_QUERY;\r\nconst url = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${DEFAULT_QUERY}&${PARAM_PAGE}&${PARAM_HPP}${DEFAULT_HPP}`;\r\nconsole.log(url);\r\n\r\nconst withLoading = (Component) => ({ isLoading, ...rest }) =>\r\n    isLoading ? <Loading /> : <Component {...rest} />\r\n\r\nconst updateTopStories = (hits, page) => prevState => {\r\n    const { searchKey, results } = prevState;\r\n    const oldHits = results && results[searchKey] ? results[searchKey].hits : [];\r\n    const updatedHits = [...oldHits, ...hits];\r\n\r\n    return { results: { ...results, [searchKey]: { hits: updatedHits, page }}, isLoading: false\r\n    }\r\n}\r\n\r\nclass Python extends Component{\r\n\r\n    // Setting up internal component state\r\n    // ES6 class can use constructors to initialize internal state\r\n    constructor(props){\r\n        // super props sets this.props to the constructor\r\n        super(props);\r\n\r\n        // Setting up state\r\n        this.state = {\r\n            results: null,\r\n            searchKey: '',\r\n            searchTerm: 'Python',\r\n            isLoading: false,\r\n        }\r\n\r\n        // bind the functions to this (app component)\r\n        this.removeItem = this.removeItem.bind(this);\r\n        this.searchvalue = this.searchValue.bind(this);\r\n        this.fetchTopStories = this.fetchTopStories.bind(this);\r\n        this.setTopStories = this.setTopStories.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    }\r\n\r\n    // Check top stories search term\r\n    checkTopStoriesSearchTerm(searchTerm){\r\n        return !this.state.results[searchTerm];\r\n    }\r\n\r\n    // Set top stories\r\n    setTopStories(result){\r\n        // get hits and page from result\r\n        const {hits, page} = result;\r\n\r\n        this.setState(updateTopStories(hits, page));\r\n    }\r\n\r\n    // Fetch the stories\r\n    fetchTopStories(searchTerm, page){\r\n        this.setState({ isLoading: true });\r\n        fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\r\n            .then(response => response.json())\r\n            .then(result => this.setTopStories(result))\r\n            .catch( e => e);\r\n    }\r\n\r\n    // component did mount\r\n    componentDidMount() {\r\n        const { searchTerm } = this.state;\r\n        this.setState({ searchKey: searchTerm });\r\n        this.fetchTopStories(searchTerm, DEFAULT_PAGE);\r\n    }\r\n\r\n    // on search submit function\r\n    onSubmit(event){\r\n        const { searchTerm } = this.state;\r\n        this.setState({ searchKey: searchTerm });\r\n\r\n        if(this.checkTopStoriesSearchTerm(searchTerm)){\r\n            this.fetchTopStories(this.state.searchTerm, DEFAULT_PAGE);\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    // let's rewrite removeItem function in ES6\r\n    removeItem(id){\r\n        const { results, searchKey } = this.state;\r\n        const {hits, page} = results[searchKey];\r\n        // const isNotId = item => item.objectId !== id;\r\n        const updatedList = hits.filter(item => item.objectID !== id);\r\n        // Object assign\r\n        // this.setState({ result: Object.assign({}, this.state.result, {hits: updatedList}) });\r\n\r\n        // Spread operator\r\n        this.setState({ results: {...results, [searchKey]: {hits: updatedList, page}} });\r\n    }\r\n\r\n    // Get input fields value from search form\r\n    searchValue = (event) => {\r\n        // console.log(event);\r\n        this.setState({ searchTerm: event.target.value })\r\n    }\r\n\r\n    render (){\r\n        const { results, searchTerm, searchKey, isLoading } = this.state;\r\n\r\n        // if(!result){ return null; }\r\n        const page = (results && results[searchKey] && results[searchKey].page) || 0;\r\n        const list = (results && results[searchKey] && results[searchKey].hits) || [];\r\n\r\n        console.log(this);\r\n\r\n        return (\r\n            <div>\r\n\r\n                <Container>\r\n                    <Row>\r\n                        <Table\r\n                            list={ list }\r\n                            removeItem={ this.removeItem }\r\n                        />\r\n\r\n                        <div className=\"text-center alert\">\r\n                            <ButtonWithLoading\r\n                                isLoading={isLoading}\r\n                                className=\"btn btn-success\"\r\n                                onClick={ () => this.fetchTopStories(searchTerm, page + 1) }>\r\n                                Load more\r\n                            </ButtonWithLoading>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nconst ButtonWithLoading = withLoading(Button);\r\n\r\nexport default Python;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport Javascript from './components/Javascript/index';\nimport Python from './components/Python/index';\nimport {\n    BrowserRouter as Router, Switch, Route, Link\n} from \"react-router-dom\";\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav, NavItem } from 'react-bootstrap';\n\nconst Root = () =>\n<Router basename=\"/become-a-master-of-javavascript-from-scratch-react/\">\n    <div>\n        <Navbar>\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/about\">About</Link>\n            <Link to=\"/javascript\">Javascript</Link>\n            <Link to=\"/python\">Python</Link>\n        </Navbar>\n\n        <Route exact path=\"/\" component={ App } />\n        <Route exact path=\"/javascript\" component={ Javascript } />\n        <Route exact path=\"/python\" component={ Python } />\n    </div>\n</Router>\n\nconst About = () =>\n    <div>\n        <h1>This is the about page....</h1>\n    </div>\n\n// a variable declared with const cannot be changed\n// a variable declared with var or let can be changed\n// But if a variable is an array or an object, it's value can be altered\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}